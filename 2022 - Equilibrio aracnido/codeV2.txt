class program {

	void turn(n){
    	iterate(n){
        	turnleft();
        }
    }
    
    void restoreBeepers(){
        while(notFacingNorth){
            turn(1);
        }
        move();
        returnClonedBeepers(0);
        while(notFacingEast){
            turn(1);
        }
        move();
    }
    void returnClonedBeepers(n){
    	if(nextToABeeper){
            pickbeeper();
            returnClonedBeepers(succ(n));
        }else{
            turn(2); //Girar al sur
            move();
            turn(1); //Girar al este
            iterate(n){
                putbeeper();
            }
        }
    }
    void saveBeepers(n){
    	while(notFacingNorth){
        	turn(1);
        }
        move();
        if(notNextToABeeper){
          iterate(n){
              putbeeper();

          }
        }
        turn(2); //Girar al sur
        move();
        turn(1); //Girar al este
    }
    void cloneBeepers(n){
    	if(nextToABeeper){
            pickbeeper();
            cloneBeepers(succ(n));
        }else{
            saveBeepers(n);
            iterate(n){
            	putbeeper();
            }
        }
    }
   
   
    
    void countBeepers3(n){
    	if(nextToABeeper){
        	pickbeeper();
            countBeepers3(succ(n));
        }
        else{
            /*while(notFacingNorth){
                turn(1);
            }
            move();
            returnClonedBeepers(0);
            while(notFacingEast){
                turn(1);
            }
            move();*/
            restoreBeepers();
            getUnbalance(n);
        }
    }
    void getUnbalance(n){
    	if(nextToABeeper){
          cloneBeepers(0); // Respaldo de los beepers
          countBeepers3(n);
        }else{
        	returnRightSide(n);
        }
    }
    void countBeepers2(n){
    	if(iszero(n)&&notNextToABeeper){
            while(notFacingNorth){
                turn(1);
            }
            move();
            returnClonedBeepers(0);
        	turnoff();
        }else if(iszero(n)){
        	getUnbalance(0);
        }else if(nextToABeeper){
        	pickbeeper();
            countBeepers2(pred(n));
        }else{
            restoreBeepers();
            substractBeepers(n);
        }
    }
    void substractBeepers(n){
    	if(nextToABeeper){
          cloneBeepers(0); // Respaldo de los beepers
          countBeepers2(n);
        }else{
        	returnLeftSide(n);
        }
    }
    void countBeepers(n){
    	if(nextToABeeper){
        	pickbeeper();
            countBeepers(succ(n));
        }
        else{
            restoreBeepers();
            addBeepers(n);
        }
    }
    void addBeepers(n){
    	if(nextToABeeper){
          cloneBeepers(0); // Respaldo de los beepers
          countBeepers(n);
        }else{
        	move();
            move();
            substractBeepers(n);
        }
    }
    
    
    
    void checkNext(n){
    	restoreBeepers();
        isGreater(n);
    }
    void setGreater(n){
    	if(nextToABeeper){
        	pickbeeper();
            setGreater(succ(n));
        }else{
            checkNext(n);
        }
    }
    void isGreater(n){
    	if(nextToABeeper){
            cloneBeepers(0); // Respaldo de los beepers
            iterate(n){
                if(nextToABeeper&&notFacingNorth){
                    pickbeeper();
                }else{
                    while(notFacingEast){ // Mira al norte
                        turn(1);
                    }
                }
            }

            if(nextToABeeper){
                setGreater(n);
            }else{
                while(nextToABeeper){
                    pickbeeper();
                }
                checkNext(n);
            }
        }else{
            backWithGreater(n);
        }
    }
    
    
    
    
    void backWithGreater(n){
    	turn(2);
        move();
        while(nextToABeeper){
        	cloneBeepers(0);
        	iterate(n){
            	if(nextToABeeper&&notFacingNorth){
                	pickbeeper();
                }else{
                	while(notFacingNorth){
                    	turn(1);
                    }
                }
            }
            if(notNextToABeeper&&notFacingNorth){
                while(notFacingNorth){
                    turn(1);
                }
                move();
                returnClonedBeepers(0);
                return();
            }else{
                while(notFacingNorth){
                    turn(1);
                }
                move();
                returnClonedBeepers(0);
                while(notFacingWest){
                    turn(1);
                }
                move();
            }
        }
    }
    
    
    
    void takeBeepers(n){
    	iterate(n){
        	pickbeeper();
        }
    }
    void returnLeftSide(n){
    	while(notFacingWest){
        	turn(1);
        }
        move();
        while(leftIsBlocked){
        	move();
        }
        turn(2);
        move();
        isGreater(0);
        takeBeepers(n);
    }
    
    void returnRightSide(n){
    	while(notFacingWest){
        	turn(1);
        }
        move();
        while(nextToABeeper){
        	move();
        }
        
        turn(2);
        move();
        isGreater(0);
        takeBeepers(n);
    }
   
    program () {
        addBeepers(0);
        turnoff();
    }
}